diff -Naur android-ndk-r18b-orig/build/tools/make_standalone_toolchain.py android-ndk-r18b/build/tools/make_standalone_toolchain.py
--- android-ndk-r18b-orig/build/tools/make_standalone_toolchain.py	2018-10-11 12:49:38.000000000 +0200
+++ android-ndk-r18b/build/tools/make_standalone_toolchain.py	2018-11-10 21:42:48.632584341 +0100
@@ -353,7 +353,9 @@
                      platforms_path, host_tag):
     """Create a standalone toolchain."""
     copy_directory_contents(gcc_path, install_path)
+    os.system('chmod -R +w "{}"'.format(install_path))
     copy_directory_contents(clang_path, install_path)
+    os.system('chmod -R +w "{}"'.format(install_path))
     triple = get_triple(arch)
     make_clang_scripts(
         install_path, triple, api, host_tag.startswith('windows'))
@@ -365,9 +367,11 @@
     install_headers = os.path.join(install_sysroot, 'usr/include')
     os.makedirs(os.path.dirname(install_headers))
     shutil.copytree(headers, install_headers)
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     arch_headers = os.path.join(sysroot, 'usr/include', triple)
     copy_directory_contents(arch_headers, os.path.join(install_headers))
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     for lib_suffix in ('', '64'):
         lib_path = os.path.join(platforms_path, 'usr/lib{}'.format(lib_suffix))
@@ -375,20 +379,24 @@
             install_sysroot, 'usr/lib{}'.format(lib_suffix))
         if os.path.exists(lib_path):
             shutil.copytree(lib_path, lib_install)
+            os.system('chmod -R +w "{}"'.format(install_path))
 
     static_lib_path = os.path.join(sysroot, 'usr/lib', triple)
     static_lib_install = os.path.join(install_sysroot, 'usr/lib')
     if arch == 'x86_64':
         static_lib_install += '64'
     copy_directory_contents(static_lib_path, static_lib_install)
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     prebuilt_path = os.path.join(NDK_DIR, 'prebuilt', host_tag)
     copy_directory_contents(prebuilt_path, install_path)
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     gdbserver_path = os.path.join(
         NDK_DIR, 'prebuilt', 'android-' + arch, 'gdbserver')
     gdbserver_install = os.path.join(install_path, 'share', 'gdbserver')
     shutil.copytree(gdbserver_path, gdbserver_install)
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     toolchain_lib_dir = os.path.join(gcc_path, 'lib/gcc', triple)
     dirs = os.listdir(toolchain_lib_dir)
@@ -401,6 +409,7 @@
     libcxxabi_dir = os.path.join(NDK_DIR, 'sources/cxx-stl/llvm-libc++abi')
     support_dir = os.path.join(NDK_DIR, 'sources/android/support')
     copy_directory_contents(os.path.join(libcxx_dir, 'include'), cxx_headers)
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     if api < 21:
         # For any libc header that is in libandroid_support, we actually have
@@ -412,11 +421,13 @@
         copy_directory_contents(
             os.path.join(support_dir, 'include'),
             os.path.join(install_path, 'sysroot/usr/local/include'))
+        os.system('chmod -R +w "{}"'.format(install_path))
 
     # I have no idea why we need this, but the old one does it too.
     copy_directory_contents(
         os.path.join(libcxxabi_dir, 'include'),
         os.path.join(install_path, 'include/llvm-libc++abi/include'))
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     headers = [
         'cxxabi.h',
